What is load balancing?
    Load balancers are servers that forward internet traffic to multiple servers(EC2 instances) downstream.

Why we should use load balancer?
    Spread load across multiple downstream instances.
    Expose a single point of access(DNS) to our application.
    Simlessly handles failures of downstream instances.
    Do regular healthcheck to our instances.
    Provides SSL termination (HTTPS) to our websites.
    Enforce stickness with cookies.
    High availability across zones.
    Seperate public traffic from private traffic.

Why use an EC2 load balancer?
    An ELB(EC2 Load balancer) is a managed load balancer.
     . AWS gurantees that it will be working.
     . AWS takes care of upgrade, maintenance and high availability.
     . AWS provides only few configuration knobs.

It cost less to setup our own load balancer.

It is integrated with many AWS offerings/services.


Health Checks:
    Health checks are crucial to load balancer.
    They enable load balancer to know if the instances it forwards traffic to are availabil to reply to requests.
    Health checks is done on a port and route.
    If the response is not 200% (OK) then the instance is unhealthy.

                                 Health Checks
    Classic Load Balancer ---------------------------- EC2 instance
                                   Port 4567
                                   route/health
                                   
                                   
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------            
            
            
 Elastic Load Balancer Stickiness:
    It is pissible to implement stickiness so that the same client is always redirected to the same instance behind a load balancer.
    
    This works for Classic and Application load balancer.
    
    The "cookie" used for stickiness has an expiration date that we control.
    
    Use Case: Make sure that user don't lose his session data.
    
    Enabling stickness may bring imbalance to the load over the backend EC2 instances.
    
    
    
                          Client A        Client B       Client C
                              \\             |            //
                               \\            |           //
                                \\           |          //
                                 \\          |         //
                                  \\         |        //
                                   \\  _____________ //
                                      |Load Balancer|
                                       --------------
                                     //             \\
                                    //               \\
                                   //                 \\
                                  //                   \\
                                 //                     \\
                          EC2 Instance              EC2 Instance    
                       
                       
 When the stickness is not active the IP of the instance which is running keeps on changing as it redirects to another instance in the target groups.
 
 When the stickness is active we can set the instance IP duration accordingly until the cookie expires which then redirects to another instance in the target group.
 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 Elastic Load Balancer - Cross-Zone Load Balancing:
    With Cross Zone Load balancing, each load balancer distributes evenly across all registered instances in all AZ.
    
    Otherwise, each load balancer node distributes request evenly across the registered instances in it's availability zone only.
    
    
    
Classic Load Balancer:
    In classicl load balancer, cross-zone load balancing is disabled by default.
    No charges for inter AZ data if enabled.
    
    
    
Application Load balancer:
    In application load balancer, cross-zone load balancing is always enabled and can't be disaled.
    No charges for inter AZ data.
    
    
    
 Network Load Balancer:
    In network load balancer, cross-zones is disabled by default.
    Charges are applicable ($) for inter AZ if enabled.


Getway Load balancer:

    
    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------    

Elastic Load Balancer - SSL Certificate:

    SSL/TLS - Basics:
        An SSL certificate allows traffic between your client and your load balancer to be encrypted in transit (in-flight encryption).
        
        SSL refers to Secure Sockets Layer, used to encrytp connections.
        TLS refers to Transport Layer Security which is a neweer version.
        Nowadays, TLS cerfificated are mainly used but people still refe SSL.
        
        Public SSL are issued by certified authorities(CA).
        Comodo, Symantec,GoDaddy, etc.
        
        SSL certificate has an expiration date and must be renewed.
        
                                            
Load Balancer - SSL                        ---------------------------                         ---------------------
                      HTTPS encrypted      |                          |                        |                    |
                      over www             |                          |  HTTP Over Private VPC |                    |                    
                 ------------------------- |                          |------------------------|                    |
         Users   ------------------------- |     Load Balancer        |------------------------|    EC2 Instance    |
                                           |                          |                        |                    |
                                           |                          |                        |                    |
                                           ---------------------------                         ----------------------
                                           
         The load balancer uses an X.509 certificate (SSL/TLS server certificate).
         We can manager certificate with ACM(AWS Certified Manager).
         We can create upload own certificate alternatively.
         
         HTTPS listner:
             We must specify a default certificate.
             We can add an optional lists of certs t support multiple domains.
             Client can use SNI (Server Name Indication) to specify the host name they reach.
             Ability to specify a security policy to support older versions of SSL/TLS(legacy clients).
             
             
SSL - Server Name Indication(SNI):
    SNI sloves the problem of loading multiple SSL certificates onto one web servers (to serve multiple websites).
    It's a newer protocol and and requires the client to indicate the hostname of the target server in the initial SSL handshake.
    The server will then find the correct certificate or return the default one.
    

NOTE: Only works for ALB & NLB(newer generation), cloudfront.
      Does not work for CLB (older generation).
      
      
Elastic Load Balancer - SSL Certificate:
    Classic Load Balancer(v1)
        Supports only one SSL certificate.
        Must use multiple CLB for multiple hostname with multiple SSL certificates.
        
    Application Load Balancer (v2):
        Supports multiple listener with multiple SSL certificates.
        Uses Server Name Indication(SNI) to make it work.
        
      
    Network Load Balancer(v2).
        Supports multiple listener with multiple SSL certificates.
        Uses Server Name Indication(SNI) to make it work.
        
        
   
   
 Elascti Load Balancer - Connection Draining:
    Featuring Name:
        CLB: Connection Draining.
        Target Group: Deregistration Delay (ALB & NLB).
        
   Connection draining is the time out to complete "in-flight-request" while the instance is de-registring or unhealthy.
   Elastic load balancer stops sending new requests to the instance which is de-registring.
   We can set the connection draining duration between 1-3600 seconds, but 300 is by default.
   Can be disabled the duration by setting it to 0.
   Set to a low value if the requests are short.
   
   
   
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   
 Auto Scaling Groups (ASG) overview:
    














Ec2 is connected with load balancer but it does not mean that all in-bound and outbound traffic with go/come through load balancer.

Load balancer has three important points:
> A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections, 
   and a protocol and a port for back-end (load balancer to back-end instance) connections. 
   Elastic Load Balancing supports the following protocols: HTTP.
> Target group is a logical grouping of EC2 instances that sits behind a load balancer where traffic is forward to, based on protocols and ports defined in a listener rule.
  When target type is IP, we can only use following CIDR: 10.0.0.0/8, 100.64.0.0/10, 172.160.0/12, 192.168.0.0/16.

We cannot specify publicly IP address as a target IP.

Important Points:
An internet facing load balancer has a publicly resolvable DNS name.
Domain name for content on the EC2 instances served by the ELB is resolved by the internet DNS servers to the ELB DNS name(hence the IP).
Classic load balancer service support HTTP, HTTPS, TCP & SSL.
Protocols ports supported are 1-65535 and it also supports IPv4 and IPv6 and dual stack.
ALB distributes incoming traffic across multiple availability zone which in trun increases the availability of our application.
Network load balancer has the ability to handle the volatile workload and scale to millions for requests per sec.
It may take sometime for the registration of the EC2 instances under the ELB to complete. Registered EC2 instances are those that are defined under the ELB.
ELB has nothing to do with the outbond traffic that is initiated or generated from the registered EC2 istance defined to the inyernet or to any other instances withing the VPC.
ELB only has to do with the inbound traffic destined to the EC2 registered instances and the respective return traffic.
Charges for ELB are on hourly basis.
Before deleting the the ELB, it is recomended to we point the route 53 to somewhere else other than the ELB.
Deleting ELB does not affects the Ec2 instances.
The ELB forwards the traffic to ethernet 0 of our registered instances.
In case the EC2 registered instances has multiple addresses to eth 0, ELB will route the incoming traffic to it's primary IP address.
To ensure that the ELB service can scale ELB nodes in each AZ ensure that the subnet drfined for the load balancer is at least /27 in size and has at least 8 available
IP address the ELB nodes can use to scale.
For fault tolerence it is recomended that we distribute our registered EC2 instances acress multiple AX within the VPC region.
By default AWS console uses ping HTTP (port 80) for health check.
Register intances must respond with a HTTP "200 OK" message within the time out period or else it is considered as unhealthy.
AWS API uses ping TCP(port 80) for health check.
Default response tim out is 5sec (range is 5-300 sec) for health check.
Unhealthy default time-out is 30 sec (range is 5-300 sec).


The number of consecutive failed health check that should occur before the instance is considered unhealthy the range is 2-10 but default is 2 consecutive fails.

The number of consecutive successful health check that should occur before the instance is considered healthy the range is 2-10 but default is 10 consecutive successful
health checks.


Cross Region Balancing:
With cross-zone load balancing, each load balancer node for your Classic Load Balancer distributes requests evenly across the registered instances in all enabled Availability Zones. 
If cross-zone load balancing is disabled, each load balancer node distributes requests evenly across the registered instances in its Availability Zone only. For more information, 
see Cross-zone load balancing in the Elastic Load Balancing User Guide.

Cross-zone load balancing reduces the need to maintain equivalent numbers of instances in each enabled Availability Zone, 
and improves your application's ability to handle the loss of one or more instances. However, we still recommend that you maintain approximately equivalent numbers of instances in
each enabled Availability Zone for higher fault tolerance.

For environments where clients cache DNS lookups, incoming requests might favor one of the Availability Zones. Using cross-zone load balancing, 
this imbalance in the request load is spread across all available instances in the Region, reducing the impact of misbehaving clients.

When you create a Classic Load Balancer, the default for cross-zone load balancing depends on how you create the load balancer. With the API or CLI, 
cross-zone load balancing is disabled by default. With the AWS Management Console, the option to enable cross-zone load balancing is selected by default. 
After you create a Classic Load Balancer, you can enable or disable cross-zone load balancing at any time.

