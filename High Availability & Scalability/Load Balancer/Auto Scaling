Auto Scaling Groups (ASG) overview:

  What is an Auto Scaling Groups?
    > In real life the load on your website and application can change.
    > In Cloud we can can create and get rid of servers very quickly.
    
    
The Gola of Auto Scaling(ASG) is to:
  > Scale out(add EC2 instances) to match an increase load.
  > Scale in (remove EC2 instances) to match a decrease load.
  > Ensure we have a minimum and a maximum number of machines running.
  > Automatically register new instances to a load balancer.


Auto Scaling Group in AWS:

                                       Maximum Size
|-----------------------------------------------------------------------------------------------------|

        Actual size/desired capacity

|----------------------------------------------------|
                                                

                      minimum size
|--------------|    |--------------|    |------------|     |            Scale out as needed

|-------------------------------------------------------------------------------------------------------|
|                                                         |                                             |
|  EC2                EC2                 EC2             |   EC2             Ec2             Ec2       |                                  
|                                                         |                                             |
|-------------------------------------------------------------------------------------------------------|
                                     AUTO SCALING GROUP
                                     
                                     
 Auto Scaling Group with Load Balancer:
 
 
                                                Web Traffic
                                                     |
                                                     |
                                                     |
 
                                                 load balancer
                                               |---------------|
                                        
 
              /              /                /               \              \              \ distributes the load to all the instances after scaling when needed.
            /               /                /                 \              \              \
          /               /                 /                   \              \              \
|-------------------------------------------------------------------------------------------------------|
|                                                         |                                             |
|  EC2                EC2                 EC2             |   EC2             Ec2             Ec2       |                                  
|                                                         |                                             |
|-------------------------------------------------------------------------------------------------------|
                                  AUTO SCALING GROUP WITH LOAD BALANCER
                                  
                                  
                                  
ASGs has the following attributes:
  > A launch configuration
    . AMI + instance type
    . EC2 user data
    . Security groups
    . SSH key pair 
    
   > Min size/max size/ initial capacity
   > Network  + Subnet information
   > Load Balancer information.
   > Scaling Policies.
   
Auto Scaling Alarms:
  > It is possible to scale an ASG based on cloudwatch alarms.
  > An alarm monitors such as avg CPU utilization on so on....
  > Matrices are computed for the overall ASG instances.
  > Based on the alarms:
   . We can created scale-out policies(increase the number of instances).
   . We can create scale-in ploicies (decrease the number of instances).
  
|-------------------------------------------------------------------------------------------------------|                       Alarm
|                                                         |                                             |                         |
|  EC2                EC2                 EC2             |   EC2             Ec2             Ec2       | -------------------- -- |                                 
|                                                         |                                             |      Trigger scaling    |
|-------------------------------------------------------------------------------------------------------|



Auto Scaling New Rules:
  > It is now possible to define "better" auto scaling that are directly managed by EC2.
   . Target average CPU Usage.
   . Number of request on the EKB per second.
   . Average Network In.
   . Average Network Out.
These rules are easy to set up and make more sense.



Auto Scaling Custom Metric:
 >  We can auto scale based on custom metric(ex: number of connected users).
 > Send custom metric from application on EC2 instance to CloudWatch(Put metric API).
 > Created CloudWatch alarm to rwact to low/high values.
 > Use the CloudWatch alarm as the scaling policy for ASG.
 
 
 
 ASG Brain Dump:
  > Scaling polocy can be on CPU, Network .... and cna even be on custom metric or based on scheduled(if we know our visitor pattern in terms of traffic).
  > ASGs use launched configurations or Launch Templates(newer).
  > To update ASG we must provide a new launch configuration/launch templat.
  > ASG are free, we pay only for the under lying resources.
  > Having an instancer unser ASG means if they get terminated for whatevr reason, the ASG will automatically create new as a replacement, extra safety.
  > ASG can terminate an instances marked as umhealthy by an LB(and hence replace them).
  
  
  
  Auto Scaling Groups -Scaling Policies:
      Target Tracking Scaling:
          > Most simple and easy to set-up.
          > EX: I want the average ASG CPU to stat at around 40%.
   
      Simple / Step Scaling:
          > When the CloudWatch alarm is triggered (ex, CPU >70%), then add 2 units.
          > When the CloudWatch alarm is triggered(ex, CPU<30%), then remove 1 unit.
      
      Scheduled Action:
          > Antisipate a saling base on known usage pattern.
          > Ex, increase the min capacity from 10 to 5 in friday evening.
          
          
Auto Scaling Groups: Scaling Cooldowns:
  > A scaling cooldown helps you prevent your Auto Scaling group from launching or terminating additional instances before the effects of previous activities takes effects.
  > In adition to default cooldown for auto scaling group, we can create cooldowns that apply to specific simple scaling policies.
  > A scaling-specific cooldown period overrides the default cooldown period.
  > One common use of scaling-specific cooldowns is a scale-in-poliy-------- a policy that terminates a ninstances based on a specific creteria or metric.Because this policy 
    terminates, Amazon EC2 scaling needs less time to determine wheeter to terminate additional instances.
  > IF the default cooldown period is 300 sec, it is to long, we can reduce the costs by applying a scaling-specific cooldown of 180 sec to the scale-in-policy.
  > If your application is scaling up and down multiple times each hour a day, modify the Auto scaling groups cooldown timer and CloudWatch alarm that triggers the 
    scale-in-policy
  
    
    
    
Auto Scaling Group for Solution Architects:
   > ASG Defalult Termination Policy(simplified Version):
      . Find the AZ which has the most number of instances.
      . If there are multiple instances in AZ to choose from, delete the one with the oldest launch configuration.
      . ASG tries to balance the number of instances across AZ by default.
   
   
   
   
          Availability Zone A                            Availability Zone B
   |---------------------------------------------------------------------------------|
   |                                                                                 |
   |         V1     V2                                          V1          V1       |
   |                           Auto Scaling Group                                    |
   |                                                                                 |
   |         V1     V2                                           V1                  |
   |                                                                                 |
   |                                                                                 |
   -----------------------------------------------------------------------------------
   
   
ASG for Solution Architects Lifecycle Hooks:
    By default assoon as an instance is launched in an ASG it's in service.
    We have the ability to perform extra steps before the instances goes in service.    
    
    We have the ability to perform some action before the instance is terminated. 
    
    Chart:- Auto Scaling ---Scale Out---> (pending state)----> pending wait----> pending processed ----> in service-----> Terminating -----> Terminating Wait
    ----> Terminating Proceed ------> Terminated.
    
    
ASG for Solution Architects, Launch Template vs Launch Configuration:
    Both of them allow us to define:
        ID of the Amazon Machine Image(AMI, instance type, a key pair, security groups and other parameters that we use to launch EC2 instances.
        
    Launch Configuration(Legacy):
        Must be re-created everytime.
        
   Launch Template(Newer):
        Can have multiple versions.
        Create parameter subsets(partial configuration for re-use and inheritance).
        Provision both using on-demand and spot instances(or a mix of both).
        Can use T2 umlimited brust feature.
        Recomemded by AWS going forward.



=======================================================================================================================================================================
 Auto Scaling:

Exam Point of View:
It is used for fault tolerance and high availability.
If AS finds that the number of EC2 instances launched by ASG into subject AZs is not balanced(EC2 instances are not equally dustributed), AS do rebalancing activity by itself.
Auto scling always tries to balance the instances distributions across AZs.
While rebalancing, ASG launches new EC2 instances where there are less EC2 at present and then terminates the instances from the AZ that had more instances.

What causes Imbalance of EC2?
If we add or remove some subnets/AZ from autoscaling group.
If we manually request for EC2 termination from our ASG.
An AZ that did not have enough EC2 capacity now has enough capacity and it is one of our autoscaling group.
We can attach a running EC2 instance to an autoscaling group by using AWS console or CLI.
COndition should be - instance should be running.
AMI used to launch the EC2 still exist.
Instance is not part of another autoscalig group.
Instance is in the same AZ of the same group.
If the Auto Scaling group has an attached load balancer target group or Classic Load Balancer, the instance and the load balancer must both be in the same VPC.
If the existing EC2 instance under the autoscaling group plus the one to be needed exceeds the max capacity of the autoscaling groupthe request will fail,
EC2 instance would not be added.
We can manually remobe the ec2 instance from autoscaling groupusingASW console or CLI.
Than the detached ec2 can be attached to another ASG.
We can attach one or more elastic load balancer to  our autoscaling group.
The elastic load balancer must be in the same region as the autoscaling group.
Instances and the ELB must be in the same VPC.




Auto Scaling Components:
Launch Configuration: Instance type, AMI, key pair, security group.

Auto scaling Group:
Group name, group size, VPC, subnet, health check period (default 300sec - 5 mins).

Scaling Plociy:

Types of auto scaling:
What are the types of auto-scaling in AWS?
Autoscaling in Amazon Web Services (AWS)?
There are four main types of AWS autoscaling: manual scaling, scheduled scaling, dynamic scaling, and predictive scaling.


1. Manual Scaling.

2. Dynamic - 
> Target tracking scaling—Increase and decrease the current capacity of the group based on a Amazon CloudWatch metric and a target value. 
   It works similar to the way that your thermostat maintains the temperature of your home—you select a temperature and the thermostat does the rest.

> Step scaling—Increase and decrease the current capacity of the group based on a set of scaling adjustments, known as step adjustments, that vary based on the size of the alarm breach.

> Simple scaling—Increase and decrease the current capacity of the group based on a single scaling adjustment, with a cooldown period between each scaling activity.


3. Predictive scaling ploicy - Scheduled scaling.


Note
If you are detaching instances that are in the Standby state, exercise caution. 
Attempting to detach instances after putting them into the Standby state may cause other instances to terminate unexpectedly.


In warm up period it waits for the EC2 instances to get started and services to get distributed.
 
In cooldown period it waits for 300sec and ignores any alarms triggered.




EXAM POINT OF VIEW:
==================================================================
Scale Group Size has following metrics:
> Application Load balancer Request Count per target.
> Average CPU Utilization.
> Average Network in (Bytes)
> Average Network out (Bytes)

        
          
  
