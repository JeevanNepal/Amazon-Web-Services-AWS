What is an EBS (Elastic Block Store)?
    Amazon Elastic Block Store (EBS) is an easy to use, high-performance, block-storage service designed for use with Amazon Elastic Compute 
    Cloud (EC2) for both throughput and transaction intensive workloads at any scale.

What is an EBS volume?
    An Amazon EBS volume is a durable, block-level storage device that you can attach to your instances while they run. You can use EBS volumes as primary 
    storage for data that requires frequent updates, such as the system drive for an instance or storage for a database application.
    
    > An EC2 machine looses it's root volume(main drive) when it is manually terminated.
    > Unexpected termination may happen time to time(AWS would mail us anyway).
    > Sometimes, you need a way to store instance data somewhere.
    > It allows your instances to persist data.
    > It is a network drive (i.e not a physical drive).
        . It uses the network to communicate the instance, which means that there might be a bit of latency.
        . It can be detched from an EC2 instance and can be attached to another one quickly.
        
    > It is locked to an available zone(AZ).
        . An EBS volume in us-east-1 cannot be attached to us-east-2.
        . To move a volume across we first need a snapshot it. 
    
    > We need to provide a provisioned capacity(size in GBs and IOPs){(IOPS are a unit of measure representing input/output operations per second. 
             The operations are measured in KiB, and the underlying drive technology determines the maximum amount of data that a volume type counts as a single I/O.)}.
    
        . we will get billed for all the provisioned capacity, eg: if we provision 1TB and use 1 GB then we will still be billed for 1 TB.
        . we can increase the capacity of the drive over time.


EBS Volume Types:
   > Amazon EBS provides the following volume types, which differ in performance characteristics and price, so that you can tailor your storage performance and cost to
   the needs of your applications.
   The volumes types fall into these categories:

1.Solid state drives (SSD) — Optimized for transactional workloads involving frequent read/write operations with small I/O size, where the dominant performance attribute is IOPS.

2.Hard disk drives (HDD) — Optimized for large streaming workloads where the dominant performance attribute is throughput.

3. Previous generation — Hard disk drives that can be used for workloads with small datasets where data is accessed infrequently and performance is not of primary importance.
We recommend that you consider a current generation volume type instead.


GP2 (SSD) -  General purpose SSD volume that balances price and performance for a wide variety of workloads. General purpose SDD is a default volume.
IO 1(SSD) -  HIghest performance SSD volume for mission-critical low- latency or high throughput workloads.
SD1(HDD) - Low cost volume defined for frequently accessed throughput intensive workloads.
SC1(HDD) - Lowest cost HDD volume designed for less frequently accessed workloads.

EBS volume are characterised in size | Throughput  | IOPs (I/O ops per sec).
Only GP2 and IO 1 can be used as boot volumes.


The root device is /dev/nvme0n1. The attached volume is /dev/nvme1n1, which is not yet mounted.

[ec2-user ~]$ lsblk
NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
nvme1n1       259:0    0  10G  0 disk
nvme0n1       259:1    0   8G  0 disk
-nvme0n1p1    259:2    0   8G  0 part /
-nvme0n1p128  259:3    0   1M  0 part



The following is example output for a T2 instance. The root device is /dev/xvda. The attached volume is /dev/xvdf, which is not yet mounted.

[ec2-user ~]$ lsblk
NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
xvda    202:0    0    8G  0 disk
-xvda1  202:1    0    8G  0 part /
xvdf    202:80   0   10G  0 disk


Use the file -s command to get information about a device, such as its file system type. If the output shows simply data, as in the following example output, 
there is no file system on the device and you must create one.

[ec2-user ~]$ sudo file -s /dev/xvdf
/dev/xvdf: data


REFER THIS FOR MORE DETAILS:
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html

EBS Volume Types Deep Dive:
     > GP2 (from AWS Docs) use cases:
     
        . Recomended for most workload.
        . System boot volume.
        . Virtual deskpot.
        . Low-latency interative apps.
        . Development and test environments.
        . Size can range from 1 GBi to 16TBi.
        . Small gp2 volumes can brust upto IOPs to 3000.
        . Max IOPs is 16000.
        . 3 IOPs / 1GB, means at 5334 GB we are at the max IOPs.
        

    >  IO1(from AWS Docs) use cases:
    
       . Used for critical applications that required sustained IOPS performance or more than 16000 IOPS per volume (gp2 limit).
       . Large database workload such as, mongodb, Cassandra, Microsoft SQL Server, mySql, postgres SQL, oracle.
       . Size can range from 4GB to 16TB.
       . IOPS is provisioned(PIOPS) - Min 100, Max 64000 {Nitro Instance(out of scope now)}, else Max 32000(for all other instances).
       . The maximum ration of provisioned IOPS to requested volume size (in GB) is 50:1. (Size (GiB)
            Size in GB: 10 (Min: 4 GiB, Max: 16384 GiB) 
            IOPS 600
            Size in GB: 600 (Min: 100 IOPS, Max: 64000 IOPS) 
            Maximum ratio of 50:1 is permitted between IOPS and volume size.)      
       
       
    > St1 (from AWS Docs) use cases:
      . Streaming workloads requiring consistent,fast throughput at low price.
      . Big data, data warehouse, log processing.
      . Apache kafka.
      . Cannot be a boot volume.
      . Size can range from 500GBi to 16TiB.
      . Max IOPS is 500.
      . Max throughput of 500 MiB/s - can brust.
       
       
   > SC1 (from AWS doc) use cases:
      . Throughput-oriented storage for large volumes of data that is infrequently accessed.
      . Scenarios where the lowest storage cost is important.
      . Cannot be boot volume.
      . Size can range from 500GBi to 16TiB.
      . Max IOPS is 250.
      . Max throughput of 250 MiB/s - can brust. 
     
     
     
EBS Snapshots:
  > An EBS snapshot is a point-in-time copy of your Amazon EBS volume, which is lazily copied to Amazon Simple Storage Service (Amazon S3). 
     EBS snapshots are incremental copies of data. 
     This means that only unique blocks of EBS volume data that have changed since the last EBS snapshot are stored in the next EBS snapshot
  
  
  > Incremental - only backup changed block.
  > EBS backup use IO and you shouldn't run them while your application is handling a lot of traffic.
  > Snapshots will be stored in S3(but we can't directly see them).
  > Not necessary to detech volume tp dp snapshot, but recomended.
  > Max 100000 snapshots.
  > Can copy snapshot across AZ.
  > Can make image (AMI) from snapshot.
  > EBS volumes restored by snapshot need to be pre-warmed (using fio or command to read the entire volume).
  > Snapshots can be automated using Amazon data Lifecycle Manager.

EBS Volume Exam point of View:
===============================
1. Per AWS account, upto 5K EBS columes can be created.
2. Per account upto 10k EBS snapshot can be created.
3. EBS sapacshots are stored in S3 however we cannot access them directly. We ca only access them through Ec2 APIs.
4. EBS volumes are AZ specific, snapshot are region specific.
5. Any AZ in regioncan use snapshot to create EBS volume.
6. To migrate an EBS from once AZ to another, create a snapshot (region specific) and create an EBS volume from the snapshot in the intended AZ.
7. We can create a snapshot to an EBS volume of the same or larger size than the original volume size from which the snapshot was initially created.
8. We can take a snapshot of a non-root EBS volume while the voulme is in use running EC2 instance.
9. This means we can still access it while the snapshot is being processed.
10. However the snapshot will only include data that is already written to our voulme.
11. The snapshot is created immediately but it may stay in pending state until the full snapshot is conpleted. This may take few hours specially for the first time 
snapshot of a volume.
12. Durung the period when the snapshot status is pending we can still access the volume (non-root drive). but I/O might be slower because of the snapshot activity.
13. While is pending state an in-progress state snapshot eill not include data from ongoing reads and writes to the volume.
14. To take complete snapshot of our non-root EBS, we need to stop or unmount the volume.
15. To create a snapshot for a root EBS volume, we must stop/detach the volume from the instance first then take the snapshot.
16. EBS volume is network attached storage.
17. If the EBS is attached to instance store volume, than when the instance status is changed to stop, paused ot terminate the data will be lost.
  

     
EBS Volume Migration:
  > EBS volumes are locked to specific AZ.
  > To migrate it to diferent AZ or region.
    . We need the snapshot of the EBS volume.
    . (optional)copy fo the volume to different region.
    . Create a volume from the snapshot in the AZ of our choice.
    
    
  
EBS Operation - Volume Encryption:
 > Create an EBS snapshot of the volume.
 > Encrypt the EBS snapshot (using copy).
 > Create a new EBS volume from the snapshot(the newly created volume also will be encrypted).
 > Now we can attach the encrypted volume to the original instance.
 
    
EBS vs Instance Store:
 > Some instance do not come with root EBS volumes.
 > Instead they come with "instance store"(= ephemeral sotrege).
 > Instance store is physically attached to the machine(EBS is network drive).
 
 > Pros:
    . Better I/O performance.
    . Good for buffer, cache, scratch data, temporary contents.
    . Data survives reboots.
    
  >Cons:
    . On stop or termination, the instance store is lost.
    . We can't resize the instance store.
    . Backups must be operated by the user.
    
    
  
Local EC2 Instance Store:
    > Physica disk attached to the physical server where your EC2 machine is.
    > Very high IOPs (because physical).
    > Disk upto 7.5 TiB (can change over time), stripped to reach 30 Tib.
    > Block storage(like an EBS).
    > Cannot be increased in size.
    > Risk of data loss if hardware fails.
  
  
EBS Raid Configuration:RAID(Redundant Array of Independent Disks).
    > EBS Raid options:
        . RAID 0 (also known as a stripe set or striped volume) splits ("stripes") data evenly across two or more disks, without parity information, redundancy, or fault tolerance.
          Once the stripe size is defined during the creation of a RAID 0 array, it needs to be maintained at all times.
        . 
  
  
  (Redundant Array of Independent Disks Mode 1) A popular disk or solid state drive (SSD) subsystem that increases safety by writing the same data on two drives.Called 
  "mirroring," RAID 1 does not increase performance. However, if one drive fails, the second drive is used, and the failed drive is manually replaced.
  
  Fault tolerance is the property that enables a system to continue operating properly in the event of the failure of some of its components.
  
  
======================================================================================================================================================================================================================================================================================================================================  
  
 Block Storage                                                                                                                  Vs                         Object storage: 
 Block storage is suitsble for transactional databases, random read/write loads and structured database storage.                                           Object storage stores the files as a whole and does not devide them.
 
Block storage divides the data to be sotred in evenly sized blocks(data chunks) for instance,                                                              In object storage, an object is, the file or data itself.
 a file can be split into every sized blocks brfore it is stored.                                                                                          It's metadata.Obejct global unique ID.

Data blocks stored in block storage would not contain metadata(data created, data modified, content type, etc.)                                            The object global unique ID, is a unique identifier for the objectand it must be unoque such that it can be retrieved disregarding where it's physical storage location is.

Block storage only keeps the address (index), where the data blocks are stored, it does not care what is in that block.                                    Example of object storage solution, dropbox, AWS, S3, facebook.
Just how to retrieve it when required.






INCREMENTAL SNAPSHOT:
=====================
How snapshots work
The first snapshot that you create from a volume is always a full snapshot. It includes all of the data blocks written to the volume at the time of creating the snapshot. Subsequent snapshots of the same volume are incremental snapshots. They include only changed and new data blocks written to the volume since the last snapshot was created

The size of a full snapshot is determined by the size of the data being backed up, not the size of the source volume. Similarly, the storage costs associated with a full snapshot is determined by the size of the snapshot, not the size of the source volume. For example, you create the first snapshot of a 200 GiB Amazon EBS volume that contains only 50 GiB of data. This results in a full snapshot that is 50 GiB in size, and you are billed for 
50 GiB snapshot storage.

Similarly, the size and storage costs of an incremental snapshot are determined by the size of any data that was written to the volume since the previous snapshot was created. Continuing this example, if you create a second snapshot of the 200 GiB volume after changing 20 GiB of data and adding 10 GiB of data, the incremental snapshot is 30 GiB in size. You are then billed for that additional 30 GiB snapshot storage.

For more information about snapshot pricing, see Amazon EBS pricing.

Important
When you archive an incremental snapshot, it is converted to a full snapshot that includes all of the blocks written to the volume at the time that the snapshot was created. It is then moved to the Amazon EBS Snapshots Archive tier. Snapshots in the archive tier are billed at a different rate from snapshots in the standard tier. For more information, 
see Pricing and billing.

The following sections show how an EBS snapshot captures the state of a volume at a point in time, and how subsequent snapshots of a changing volume create a history of those changes.

Multiple snapshots of the same volume

The diagram in this section shows Volume 1, which is 15 GiB in size, at three points in time. A snapshot is taken of each of these three volume states. The diagram specifically shows the following:

In State 1, the volume has 10 GiB of data. Snap A is the first snapshot taken of the volume. Snap A is a full snapshot and the entire 10 GiB of data is backed up.

In State 2, the volume still contains 10 GiB of data, but only 4 GiB have changed after Snap A was taken. Snap B is an incremental snapshot. It needs to back up only the 4 GiB that changed. The other 6 GiB of unchanged data, which are already backed up in Snap A, are referenced by Snap B rather than being backed up again. This is indicated by the dashed arrow.

In State 3, 2 GiB of data have been added to the volume, for a total of 12 GiB, after Snap B was taken. Snap C is an incremental snapshot. It needs to back up only the 2 GiB that were added after Snap B was taken. As shown by the dashed arrows, Snap C also references the 4 GiB of data stored in Snap B, and the 6 GiB of data stored in Snap A.

The total storage required for the three snapshots is 16 GiB total. This accounts for 10 GiB for Snap A, 4 GiB for Snap B, and 2 GiB for Snap C.


        Snapshots capturing an initial volume state and two subsequent states after data has
          been changed.
      
Incremental snapshots of different volumes

The diagram in this section shows how incremental snapshots can be taken from different volumes.

Vol 1, which is 14 GiB in size, has 10 GiB of data. Because Snap A is the first snapshot taken of the volume, it is a full snapshot and the entire 10 GiB of data is backed up.

Vol 2 is created from Snap A, so it is an exact replica of Vol 1 at the time the snapshot was taken.

Over time, 4 GiB of data is added to Vol 2 and the total size of its data is 14 GiB.

Snap B is taken from Vol 2. For Snap B, only the 4 GiB of data that was added after the volume was created from Snap A is backed up. The other 10 GiB of unchanged data, which is already stored in Snap A, is referenced by Snap B instead of being backed up again.

Snap B is an incremental snapshot of Snap A, even though it was created from a different volume.

Important
The diagram assumes that you own Vol 1 and Snap A, and that Vol 2 is encrypted with the same KMS key as Vol 1. If Vol 1 was owned by another AWS account and that account took Snap A and shared it with you, then Snap B would be a full snapshot. Or, 
if Vol 2 was encrypted with a different KMS key than Vol 1, 
then Snap B would be a full snapshot.


        Snapshots capturing an initial volume state and two subsequent states after data has
          been changed.
      
For more information about how data is managed when you delete a snapshot, see Delete an Amazon EBS snapshot.

Copy and share snapshots
You can share a snapshot across AWS accounts by modifying its access permissions. You can make copies of your own snapshots as well as snapshots that have been shared with you. For more information, see Share an Amazon EBS snapshot.

A snapshot is constrained to the AWS Region where it was created. After you create a snapshot of an EBS volume, you can use it to create new volumes in the same Region. For more information, see Create a volume from a snapshot. You can also copy snapshots across Regions, 
making it possible to use multiple Regions for geographical expansion, data center migration, and disaster recovery. You can copy any accessible snapshot that has a completed status. For more information, see Copy an Amazon EBS snapshot.

========================================================================
Encryption support for snapshots
EBS snapshots fully support EBS encryption.

Snapshots of encrypted volumes are automatically encrypted.

Volumes that you create from encrypted snapshots are automatically encrypted.

Volumes that you create from an unencrypted snapshot that you own or have access to can be encrypted on-the-fly.

When you copy an unencrypted snapshot that you own, you can encrypt it during the copy process.

When you copy an encrypted snapshot that you own or have access to, you can reencrypt it with a different key during the copy process.

The first snapshot you take of an encrypted volume that has been created from an unencrypted snapshot is always a full snapshot.

The first snapshot you take of a reencrypted volume, which has a different CMK compared to the source snapshot, is always a full snapshot.



Root EBS Volume Encryption:
===========================
There is no direct way to change the encryption state of a volume.
There is an indirect workaround to this.
Launch the instance with the EBS volume required.
Do whatever patching or install applications.
Create an AMI from the EC2 instance.
Copy the AMI and choose encryption while copying.
This results it an encrypted AMI that is private.
Use the encryption AMI to launch new EC2 instances which will have there EBS root volume encrypted.

How to share EBS Snapshot:
=========================
To encrypt a volume or a snapshot, we need an encryption key, these keys are called customer master key (CMK) and are managed by AWS key managemrnt service(KMS).

When encrypting the first EBS volume, AWS KMS creates a default CMK key.

This key is used for your first volume encryption, encryption of snapshot created from this volumes and subsequent volumes created from these snapshots.

After that each newly encrypted volume is encrypted with a uniqie seperate AES-256 bit encryption key. This key is used toencrypt the volume, its snapshot and any volumes created
of it's snapshot.



Chaningin Encryption key:
=-======================
We cannot change the encryption key used to encrypt on existing encrypted snapshot or encrypted EBS volume.

If we want to chnage the key, we need to create a copy of snapshot and specify during the copy process that you want to re-encrypt the copy with a different  key.

This comes in handy when we have to snapshot that was encrypted usng your default CMS key and we want to change the key in order to be ab;e to share the snapshot with other 
account.

By default, only the account owner can create volumes form the account snapshot.

You can share your unencrypted snapshot with the AWS community by making them public.

Also you can share your unencrypted snapshot with a selected AWS account by making them private then selecting the AWS account to share with.

We can not make encrypted snapshot public.

We can have upto 5 snapshot copy request running in a single destination per account.

We can share our encrypted snapshot with specific AWS account, make sure that we use non-default CMK key.

Configure cross permission in order to give the account with which we want to share the snapshot, access to the custom CMS key used to encrypt the snapshot.

Without this the other account will not be able to copy the snapshot, nor will be bale to create create volume of the snapshot.

AWS will not allow us to share snapshot encrypted using our default CMK key.

For the account with whom an encrypted snapshot is shared, they must first create their own copies if the snapshot, then they use that copy to restore/create EBS vollume.

We cna only make a copy of the snapshot when it has been fullly saved to S3 and not during the snapshot's pending status.

Amazon S3 server side encryption (SSE) protect the data in-transit while copying.



=====================================================================================================================================================================
How to attach root volume with another EC2 instance?

Attach the volume to the new instance by following these steps:
Create an EC2 instance.
Connect to RDP and keep the password and root volume device name.
In RPD account create few folders for testing purpose.
Create a snapshot of the root volume/instance. It is recomeneded to stop an instance while taking snapshot of the root volume.
Register a new AMI using the snapshot.
Launch a new instance from the new AMI.
Detach the remaining Amazon EBS volumes from the old instance.
Reattach the Amazon EBS volumes to the new instance.
