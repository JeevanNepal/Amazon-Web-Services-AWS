What is an EBS (Elastic Block Store)?
    Amazon Elastic Block Store (EBS) is an easy to use, high-performance, block-storage service designed for use with Amazon Elastic Compute 
    Cloud (EC2) for both throughput and transaction intensive workloads at any scale.

What is an EBS volume?
    An Amazon EBS volume is a durable, block-level storage device that you can attach to your instances while they run. You can use EBS volumes as primary 
    storage for data that requires frequent updates, such as the system drive for an instance or storage for a database application.
    
    > An EC2 machine looses it's root volume(main drive) when it is manually terminated.
    > Unexpected termination may happen time to time(AWS would mail us anyway).
    > Sometimes, you need a way to store instance data somewhere.
    > It allows your instances to persist data.
    > It is a network drive (i.e not a physical drive).
        . It uses the network to communicate the instance, which means that there might be a bit of latency.
        . It can be detched from an EC2 instance and can be attached to another one quickly.
        
    > It is locked to an available zone(AZ).
        . An EBS volume in us-east-1 cannot be attached to us-east-2.
        . To move a volume across we first need a snapshot it. 
    
    > We need to provide a provisioned capacity(size in GBs and IOPs){(IOPS are a unit of measure representing input/output operations per second. 
             The operations are measured in KiB, and the underlying drive technology determines the maximum amount of data that a volume type counts as a single I/O.)}.
    
        . we will get billed for all the provisioned capacity, eg: if we provision 1TB and use 1 GB then we will still be billed for 1 TB.
        . we can increase the capacity of the drive over time.


EBS Volume Types:
   > Amazon EBS provides the following volume types, which differ in performance characteristics and price, so that you can tailor your storage performance and cost to
   the needs of your applications.
   The volumes types fall into these categories:

1.Solid state drives (SSD) — Optimized for transactional workloads involving frequent read/write operations with small I/O size, where the dominant performance attribute is IOPS.

2.Hard disk drives (HDD) — Optimized for large streaming workloads where the dominant performance attribute is throughput.

3. Previous generation — Hard disk drives that can be used for workloads with small datasets where data is accessed infrequently and performance is not of primary importance.
We recommend that you consider a current generation volume type instead.


GP2 (SSD) -  General purpose SSD volume that balances price and performance for a wide variety of workloads. General purpose SDD is a default volume.
IO 1(SSD) -  HIghest performance SSD volume for mission-critical low- latency or high throughput workloads.
SD1(HDD) - Low cost volume defined for frequently accessed throughput intensive workloads.
SC1(HDD) - Lowest cost HDD volume designed for less frequently accessed workloads.

EBS volume are characterised in size | Throughput  | IOPs (I/O ops per sec).
Only GP2 and IO 1 can be used as boot volumes.


The root device is /dev/nvme0n1. The attached volume is /dev/nvme1n1, which is not yet mounted.

[ec2-user ~]$ lsblk
NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
nvme1n1       259:0    0  10G  0 disk
nvme0n1       259:1    0   8G  0 disk
-nvme0n1p1    259:2    0   8G  0 part /
-nvme0n1p128  259:3    0   1M  0 part



The following is example output for a T2 instance. The root device is /dev/xvda. The attached volume is /dev/xvdf, which is not yet mounted.

[ec2-user ~]$ lsblk
NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
xvda    202:0    0    8G  0 disk
-xvda1  202:1    0    8G  0 part /
xvdf    202:80   0   10G  0 disk


Use the file -s command to get information about a device, such as its file system type. If the output shows simply data, as in the following example output, 
there is no file system on the device and you must create one.

[ec2-user ~]$ sudo file -s /dev/xvdf
/dev/xvdf: data


REFER THIS FOR MORE DETAILS:
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html

EBS Volume Types Deep Dive:
     > GP2 (from AWS Docs) use cases:
     
        . Recomended for most workload.
        . System boot volume.
        . Virtual deskpot.
        . Low-latency interative apps.
        . Development and test environments.
        . Size can range from 1 GBi to 16TBi.
        . Small gp2 volumes can brust upto IOPs to 3000.
        . Max IOPs is 16000.
        . 3 IOPs / 1GB, means at 5334 GB we are at the max IOPs.
        

    >  IO1(from AWS Docs) use cases:
    
       . Used for critical applications that required sustained IOPS performance or more than 16000 IOPS per volume (gp2 limit).
       . Large database workload such as, mongodb, Cassandra, Microsoft SQL Server, mySql, postgres SQL, oracle.
       . Size can range from 4GB to 16TB.
       . IOPS is provisioned(PIOPS) - Min 100, Max 64000 {Nitro Instance(out of scope now)}, else Max 32000(for all other instances).
       . The maximum ration of provisioned IOPS to requested volume size (in GB) is 50:1. (Size (GiB)
            Size in GB: 10 (Min: 4 GiB, Max: 16384 GiB) 
            IOPS 600
            Size in GB: 600 (Min: 100 IOPS, Max: 64000 IOPS) 
            Maximum ratio of 50:1 is permitted between IOPS and volume size.)      
       
       
    > St1 (from AWS Docs) use cases:
      . Streaming workloads requiring consistent,fast throughput at low price.
      . Big data, data warehouse, log processing.
      . Apache kafka.
      . Cannot be a boot volume.
      . Size can range from 500GBi to 16TiB.
      . Max IOPS is 500.
      . Max throughput of 500 MiB/s - can brust.
       
       
   > SC1 (from AWS doc) use cases:
      . Throughput-oriented storage for large volumes of data that is infrequently accessed.
      . Scenarios where the lowest storage cost is important.
      . Cannot be boot volume.
      . Size can range from 500GBi to 16TiB.
      . Max IOPS is 250.
      . Max throughput of 250 MiB/s - can brust. 
     
     
     
EBS Snapshots:
  > An EBS snapshot is a point-in-time copy of your Amazon EBS volume, which is lazily copied to Amazon Simple Storage Service (Amazon S3). 
     EBS snapshots are incremental copies of data. 
     This means that only unique blocks of EBS volume data that have changed since the last EBS snapshot are stored in the next EBS snapshot
  
  
  > Incremental - only backup changed block.
  > EBS backup use IO and you shouldn't run them while your application is handling a lot of traffic.
  > Snapshots will be stored in S3(but we can't directly see them).
  > Not necessary to detech volume tp dp snapshot, but recomended.
  > Max 100000 snapshots.
  > Can copy snapshot across AZ.
  > Can make image (AMI) from snapshot.
  > EBS volumes restored by snapshot need to be pre-warmed (using fio or command to read the entire volume).
  > Snapshots can be automated using Amazon data Lifecycle Manager.

EBS Volume Exam point of View:
===============================
1. Per AWS account, upto 5K EBS columes can be created.
2. Per account upto 10k EBS snapshot can be created.
3. EBS sapacshots are stored in S3 however we cannot access them directly. We ca only access them through Ec2 APIs.
4. EBS volumes are AZ specific, snapshot are region specific.
5. Any AZ in regioncan use snapshot to create EBS volume.
6. To migrate an EBS from once AZ to another, create a snapshot (region specific) and create an EBS volume from the snapshot in the intended AZ.
7. We can create a snapshot to an EBS volume of the same or larger size than the original volume size from which the snapshot was initially created.
8. We can take a snapshot of a non-root EBS volume while the voulme is in use running EC2 instance.
9. This means we can still access it while the snapshot is being processed.
10. However the snapshot will only include data that is already written to our voulme.
11. The snapshot is created immediately but it may stay in pending state until the full snapshot is conpleted. This may take few hours specially for the first time 
snapshot of a volume.
12. Durung the period when the snapshot status is pending we can still access the volume (non-root drive). but I/O might be slower because of the snapshot activity.
13. While is pending state an in-progress state snapshot eill not include data from ongoing reads and writes to the volume.
14. To take complete snapshot of our non-root EBS, we need to stop or unmount the volume.
15. To create a snapshot for a root EBS volume, we must stop/detach the volume from the instance first then take the snapshot.
16. EBS volume is network attached storage.
  

     
EBS Volume Migration:
  > EBS volumes are locked to specific AZ.
  > To migrate it to diferent AZ or region.
    . We need the snapshot of the EBS volume.
    . (optional)copy fo the volume to different region.
    . Create a volume from the snapshot in the AZ of our choice.
    
    
  
EBS Operation - Volume Encryption:
 > Create an EBS snapshot of the volume.
 > Encrypt the EBS snapshot (using copy).
 > Create a new EBS volume from the snapshot(the newly created volume also will be encrypted).
 > Now we can attach the encrypted volume to the original instance.
 
    
EBS vs Instance Store:
 > Some instance do not come with root EBS volumes.
 > Instead they come with "instance store"(= ephemeral sotrege).
 > Instance store is physically attached to the machine(EBS is network drive).
 
 > Pros:
    . Better I/O performance.
    . Good for buffer, cache, scratch data, temporary contents.
    . Data survives reboots.
    
  >Cons:
    . On stop or termination, the instance store is lost.
    . We can't resize the instance store.
    . Backups must be operated by the user.
    
    
  
Local EC2 Instance Store:
    > Physica disk attached to the physical server where your EC2 machine is.
    > Very high IOPs (because physical).
    > Disk upto 7.5 TiB (can change over time), stripped to reach 30 Tib.
    > Block storage(like an EBS).
    > Cannot be increased in size.
    > Risk of data loss if hardware fails.
  
  
EBS Raid Configuration:RAID(Redundant Array of Independent Disks).
    > EBS Raid options:
        . RAID 0 (also known as a stripe set or striped volume) splits ("stripes") data evenly across two or more disks, without parity information, redundancy, or fault tolerance.
          Once the stripe size is defined during the creation of a RAID 0 array, it needs to be maintained at all times.
        . 
  
  
  (Redundant Array of Independent Disks Mode 1) A popular disk or solid state drive (SSD) subsystem that increases safety by writing the same data on two drives.Called 
  "mirroring," RAID 1 does not increase performance. However, if one drive fails, the second drive is used, and the failed drive is manually replaced.
  
  Fault tolerance is the property that enables a system to continue operating properly in the event of the failure of some of its components.
  
  
======================================================================================================================================================================================================================================================================================================================================  
  
 Block Storage                                                                                                                  Vs                         Object storage: 
 Block storage is suitsble for transactional databases, random read/write loads and structured database storage.                                           Object storage stores the files as a whole and does not devide them.
 
Block storage divides the data to be sotred in evenly sized blocks(data chunks) for instance,                                                              In object storage, an object is, the file or data itself.
 a file can be split into every sized blocks brfore it is stored.                                                                                          It's metadata.Obejct global unique ID.

Data blocks stored in block storage would not contain metadata(data created, data modified, content type, etc.)                                            The object global unique ID, is a unique identifier for the objectand it must be unoque such that it can be retrieved disregarding where it's physical storage location is.

Block storage only keeps the address (index), where the data blocks are stored, it does not care what is in that block.                                    Example of object storage solution, dropbox, AWS, S3, facebook.
Just how to retrieve it when required.
  
