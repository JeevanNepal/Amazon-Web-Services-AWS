IAM Introduction:
IAM (Identity & Access Management)

Whole AWS Security will be in IAM.
 1. Users
 2. Groups
 3. Roles

Root account should never be used (and shared).

IAM is the center of AWS.

            Users                                Group                               Roles
        It is only for users.              Contains users.          It is for machines.(Internal usage within AWS resources).
              |                                  |                                  |
              |                                  |                                  |
-------------------------------------------------------------------------------------------------           
|                         Poloicies (JSON Documents)                                             |
|                 Defines what each of the above can do and cannot.                              |
|                                                                                                |
|                                                                                                |                                                                                                
--------------------------------------------------------------------------------------------------



IAM has a global view.
Permissions are governed by Policies (JSON).
MFA (Multi Factor Authentication) can be setup.
IAM has predefined"managed policies".
It's always best to give the minimal permission to users to do their jobs(least privilage principles). 

IAM is a private account and credentials should not be shared at any cost.


IAM Users:
---------
An IAM user is an entity that we create in AWS. It represents the person or service who uses an IAM user to interact with AWS.
We can create 5 users at a time, AM IAM user user can represent an actual person or an application that requests AWS access to perform actions on AWS resources.
THe newly created user has no credentilas we need to give themm after the user creation.
Each IAM user is associated with once and only one AWS account.


IAM Group:
---------
Group of users with same permissions under the same group.
Group can't be nested. Group is not truly an idenity in IAM because it cannot be idetified as a principal as a principal in a permission policy.
We have a limit of 300 groups in an AWS account.


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
The following table lists the resources for which quota increases area can be automatically approved..

Adjustable quotas for IAM resources
Resource	Default quota	Maximum quota                   Default Quota                           Maximum Quota
Customer managed policies per account	                        1500	                                 5000
Groups per account	                                        300	                                 500
Instance profiles per account	                                1000	                                5000
Managed policies per role	                                 10	                                  20
Managed policies per user	                                 10	                                  20
Role trust policy length	                                2048 characters	                   4096 characters
Roles per account	                                         1000	                                5000
Server certificates per account	                                 20	                                1000
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


IAM Role:
--------
A role in AWS is a set of permissions that grant access to actions and resources. Roles are similar to AWS users, but they are not associated with a specific person.

AMI?
    As we show, AWS comes with base images such as:
        Ubuntu
        Fedora 
        Redhat
        Windows
        ect ....

    These images can be customised at runtime using EC2 user data.

    That's an AMI - an image to use to creat our instances.
    AMIs can be built for linux or windows machines.

EC2 AMIs Hands On:
    First of all we will install apache:
        yum update -y: to update all the packages.
        yum install httpd: apache server.
        systemctl start httpd
        systemctl enable httpd

         echo "Hello World" > /var/www/html/index.html
         curl localhost:80

Create an image of the esixting instance:
 

Cross Account AMI Copy.


IAM Definition:
AWS identity and access mnagement is aweb service that helps you securely control access to AWS resources. We should use IAM control who is authenticated(sign-in)
and authozised (has permission) to use resources.

Limitations of IAM:
IAM users limit is 5000 per aws account. We can add upto 10 users at a time. We are also limited to 3000 groups in AWS account.
We are limited to 1000 IAM roles under AWS account.
Default limits of managed policies attached to an IAM role and IAM user is 10.
IAM user can be member of 10 groups.
We can assign two access keys (max) to an IAM user.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-----------------------------------------------------------------------------------------------------------------------------------------------------------
IAM Terms:
1> Principal.

2> Request.

3> Authentication.

4> Authorization.

5> Action/operation.

6> Resources


----------------------------------------------------------------------------------------------------------------------------
1 Principal: A principla is a person or application that can make a request for an action or operation on an AWS resources.

Our administrative IAM user is our first principal.

IAM users, roles and federated users and applications are all AWS principals.


2. Request: WHen a principal tries to use the AWS management console, the AWS API or the AWS CLI that principal sends a request to AWS. The request includes the 
following:
           Action, resources, principal, environment data, resources data.


3. Authentication: Validates the user to sing in.
To authenticate from the API to CLI, we must provide our access key and secret key.

4. Authorization: To authorize request, IAM user value from the request context to check for matching policies and determine wheteher to allow or deny the request.




  
Identity Federation:
If our users already have a way to be authenticated such as authentication through our corporate network. This is just logging internet identity provider as usch as 
with gmail or facebook ID rather than user name and password.








Permissions & Policies:
----------------------
Policy types:
The following policy types, listed in order from most frequently used to less frequently used, are available for use in AWS. For more details, see the sections below for each policy type.

Identity-based policies – Attach managed and inline policies to IAM identities (users, groups to which users belong, or roles). Identity-based policies grant permissions to an identity.

Resource-based policies – Attach inline policies to resources. The most common examples of resource-based policies are Amazon S3 bucket policies and IAM role trust policies. Resource-based policies grant 
permissions to the principal that is specified in the policy. Principals can be in the same account as the resource or in other accounts.

Permissions boundaries – Use a managed policy as the permissions boundary for an IAM entity (user or role). That policy defines the maximum permissions that the identity-based policies can grant to an entity,
but does not grant permissions. Permissions boundaries do not define the maximum permissions that a resource-based policy can grant to an entity.

Organizations SCPs – Use an AWS Organizations service control policy (SCP) to define the maximum permissions for account members of an organization or organizational unit (OU). SCPs limit permissions that 
identity-based policies or resource-based policies grant to entities (users or roles) within the account, but do not grant permissions.

Access control lists (ACLs) – Use ACLs to control which principals in other accounts can access the resource to which the ACL is attached. ACLs are similar to resource-based policies, although they are the only 
policy type that does not use the JSON policy document structure. ACLs are cross-account permissions policies that grant permissions to the specified principal. ACLs cannot grant permissions to entities within 
the same account.

Session policies – Pass advanced session policies when you use the AWS CLI or AWS API to assume a role or a federated user. Session policies limit the permissions that the role or user's identity-based policies 
grant to the session. Session policies limit permissions for a created session, but do not grant permissions. For more information, see Session Policies.

Identity-based policies
Identity-based policies are JSON permissions policy documents that control what actions an identity (users, groups of users, and roles) can perform, on which resources, and under what conditions. 
Identity-based policies can be further categorized:

Managed policies – Standalone identity-based policies that you can attach to multiple users, groups, and roles in your AWS account. There are two types of managed policies:

AWS managed policies – Managed policies that are created and managed by AWS.

Customer managed policies – Managed policies that you create and manage in your AWS account. Customer managed policies provide more precise control over your policies than AWS managed policies.

Inline policies – Policies that you add directly to a single user, group, or role. Inline policies maintain a strict one-to-one relationship between a policy and an identity. They are deleted when you delete the identity.

To learn how to choose between managed and inline policies, see Choosing between managed policies and inline policies.

Resource-based policies
Resource-based policies are JSON policy documents that you attach to a resource such as an Amazon S3 bucket. These policies grant the specified principal permission to perform specific actions on that resource and 
defines under what conditions this applies. Resource-based policies are inline policies. There are no managed resource-based policies.

To enable cross-account access, you can specify an entire account or IAM entities in another account as the principal in a resource-based policy. Adding a cross-account principal to a resource-based policy is
only half of establishing the trust relationship. When the principal and the resource are in separate AWS accounts, you must also use an identity-based policy to grant the principal access to the resource. 
However, if a resource-based policy grants access to a principal in the same account, no additional identity-based policy is required. For step-by step instructions for granting cross-service access, see IAM tutorial: 
Delegate access across AWS accounts using IAM roles.

The IAM service supports only one type of resource-based policy called a role trust policy, which is attached to an IAM role. An IAM role is both an identity and a resource that supports resource-based policies. 
For that reason, you must attach both a trust policy and an identity-based policy to an IAM role. Trust policies define which principal entities (accounts, users, roles, and federated users) can assume the role. 
To learn how IAM roles are different from other resource-based policies, see Cross account resource access in IAM.

To see which other services support resource-based policies, see AWS services that work with IAM. To learn more about resource-based policies, see Identity-based policies and resource-based policies. 
To learn whether principals in accounts outside of your zone of trust (trusted organization or account) have access to assume your roles, see What is IAM Access Analyzer?.

IAM permissions boundaries
A permissions boundary is an advanced feature in which you set the maximum permissions that an identity-based policy can grant to an IAM entity. When you set a permissions boundary for an entity, 
the entity can perform only the actions that are allowed by both its identity-based policies and its permissions boundaries. Resource-based policies that specify the user or role as the principal 
are not limited by the permissions boundary. An explicit deny in any of these policies overrides the allow. For more information about permissions boundaries, see Permissions boundaries for IAM entities.

Service control policies (SCPs)
AWS Organizations is a service for grouping and centrally managing the AWS accounts that your business owns. If you enable all features in an organization, then you can apply service control policies (SCPs) to any or all of your accounts. 
SCPs are JSON policies that specify the maximum permissions for an organization or organizational unit (OU). The SCP limits permissions for entities in member accounts, including each AWS account root user. An explicit deny in any of these policies overrides the allow.

For more information about Organizations and SCPs, see How SCPs Work in the AWS Organizations User Guide.

Access control lists (ACLs)
Access control lists (ACLs) are service policies that allow you to control which principals in another account can access a resource. ACLs cannot be used to control access for a principal within the same account. ACLs are similar to resource-based policies, 
although they are the only policy type that does not use the JSON policy document format. Amazon S3, AWS WAF, and Amazon VPC are examples of services that support ACLs. To learn more about ACLs, see Access Control List (ACL) Overview in the Amazon Simple Storage Service Developer Guide.

Session policies
Session policies are advanced policies that you pass as a parameter when you programmatically create a temporary session for a role or federated user. The permissions for a session are the intersection of the identity-based policies for the 
IAM entity (user or role) used to create the session and the session policies. Permissions can also come from a resource-based policy. An explicit deny in any of these policies overrides the allow.

You can create role session and pass session policies programmatically using the AssumeRole, AssumeRoleWithSAML, or AssumeRoleWithWebIdentity API operations. You can pass a single JSON inline session policy document using the Policy parameter.
You can use the PolicyArns parameter to specify up to 10 managed session policies. For more information about creating a role session, see Requesting temporary security credentials.

When you create a federated user session, you use the access keys of the IAM user to programmatically call the GetFederationToken API operation. You must also pass session policies.
The resulting session's permissions are the intersection of the identity-based policy and the session policy. For more information about creating a federated user session, see GetFederationToken—federation through a custom identity broker.

A resource-based policy can specify the ARN of the user or role as a principal. In that case, the permissions from the resource-based policy are added to the role or user's identity-based policy before the session is created. 
The session policy limits the total permissions granted by the resource-based policy and the identity-based policy. The resulting session's permissions are the intersection of the session policies and the resource-based policies plus the intersection of the session policies and identity-based policies.


          Evaluation of the session policy with a resource-based policy specifying the
            entity ARN
        
A resource-based policy can specify the ARN of the session as a principal. In that case, the permissions from the resource-based policy are added after the session is created. The resource-based policy permissions are not limited by the session policy. 
The resulting session has all the permissions of the resource-based policy plus the intersection of the identity-based policy and the session policy.


          Evaluation of the session policy with a resource-based policy specifying the
            session ARN
        
A permissions boundary can set the maximum permissions for a user or role that is used to create a session.
In that case, the resulting session's permissions are the intersection of the session policy, the permissions boundary, 
and the identity-based policy. However, a permissions boundary does not limit permissions granted by a resource-based policy that specifies the ARN
of the resulting session.


          Evaluation of the session policy with a permissions boundary
        
Policies and the root user
The AWS account root user is affected by some policy types but not others. You cannot attach identity-based policies to the root user, 
and you cannot set the permissions boundary for the root user. However, you can specify the root user as the principal in a resource-based policy or an ACL.
A root user is still the member of an account. If that account is a member of an organization in AWS Organizations, the root user is affected by any SCPs for the account.

Overview of JSON policies
Most policies are stored in AWS as JSON documents. Identity-based policies and policies used to set permissions boundaries are JSON policy documents that you
attach to a user or role. Resource-based policies are JSON policy documents that you attach to a resource. SCPs are JSON policy documents with restricted
syntax that you attach to an AWS Organizations organizational unit (OU). ACLs are also attached to a resource, but you must use a different syntax. 
Session policies are
JSON policies that you provide when you assume a role or federated user session.

It is not necessary for you to understand the JSON syntax. You can use the visual editor in the AWS Management Console to create and edit customer
managed policies without ever using JSON. However, if you use inline policies for groups or complex policies, you must still create and edit those 
policies in the JSON editor using the console. For more information about using the visual editor, see Creating IAM policies and Editing IAM policies.

When you create or edit a JSON policy, IAM can perform policy validation to help you create an effective policy. IAM identifies JSON syntax errors, 
while IAM Access Analyzer provides additional policy checks with recommendations to help you further refine your policies. To learn more about policy validation, 
see Validating IAM policies. To learn more about IAM Access Analyzer policy checks and actionable recommendations, see IAM Access Analyzer policy validation.

JSON policy document structure
As illustrated in the following figure, a JSON policy document includes these elements:

Optional policy-wide information at the top of the document

One or more individual statements

Each statement includes information about a single permission. If a policy includes multiple statements, AWS applies a logical OR across the statements when evaluating them. 
If multiple policies apply to a request, AWS applies a logical OR across all of those policies when evaluating them.


          JSON policy document structure
        
The information in a statement is contained within a series of elements.

Version – Specify the version of the policy language that you want to use. We recommend that you use the latest 2012-10-17 version.
For more information, see IAM JSON policy elements: Version

Statement – Use this main policy element as a container for the following elements. You can include more than one statement in a policy.

Sid (Optional) – Include an optional statement ID to differentiate between your statements.

Effect – Use Allow or Deny to indicate whether the policy allows or denies access.

Principal (Required in only some circumstances) – If you create a resource-based policy, you must indicate the account, user, role, 
or federated user to which you would like to allow or deny access. If you are creating an IAM permissions policy to attach to a user or role, 
you cannot include this element.
The principal is implied as that user or role.

Action – Include a list of actions that the policy allows or denies.

Resource (Required in only some circumstances) – If you create an IAM permissions policy, you must specify a list of resources to which the actions apply.
If you create a resource-based policy, this element is optional. If you do not include this element, 
then the resource to which the action applies is the resource to which the policy is attached.

Condition (Optional) – Specify the circumstances under which the policy grants permission.

To learn about these and other more advanced policy elements, see IAM JSON policy elements reference.

Multiple statements and multiple policies
If you want to define more than one permission for an entity (user or role), you can use multiple statements in a single policy. 
You can also attach multiple policies. If you try to define multiple permissions in a single statement, your policy might not grant the access that you expect.
We recommend that you break up policies by resource type.

Because of the limited size of policies, it might be necessary to use multiple policies for more complex permissions.
It's also a good idea to create functional groupings of permissions in a separate customer managed policy. For example, Create one policy for IAM user management, 
one for self-management, and another policy for S3 bucket management. Regardless of the combination of multiple statements and multiple policies, AWS evaluates your policies the same way.

For example, the following policy has three statements, each of which defines a separate set of permissions within a single account. The statements define the following:

The first statement, with an Sid (Statement ID) of FirstStatement, lets the user with the attached policy change their own password. The Resource element in this statement is "*" (which means "all resources").
But in practice, the ChangePassword API operation (or equivalent change-password CLI command) affects only the password for the user who makes the request.

The second statement lets the user list all the Amazon S3 buckets in their AWS account. The Resource element in this statement is "*"
(which means "all resources"). 
But because policies don't grant access to resources in other accounts, the user can list only the buckets in their own AWS account.

The third statement lets the user list and retrieve any object that is in a bucket named confidential-data, but only when the user is authenticated with multi-factor authentication (MFA). 
The Condition element in the policy enforces the MFA authentication.

When a policy statement contains a Condition element, the statement is only in effect when the Condition element evaluates to true. 
In this case, the Condition evaluates to true when the user is MFA-authenticated. If the user is not MFA-authenticated, this Condition evaluates to false. In that case, 
the third statement in this policy does not apply and the user does not have access to the confidential-data bucket.




||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


IAM Role Deligation: It is between trusted account and trusting account.
-------------------
Deligation is the granting of permission to someone to allow access to resources that you control.

Deligation involves seting up a trust between the account that owns the resources(a trustung account) and the account that contains the users that need to access the resource (the trusted account).

The trusted and trustung accounts can be any of the following:
The same account, the accounts that are both under your organisation's control.
Two account owned by different organisation.

THe trust ploicy and the permission ploicy are the 2 policies to deligate permission to access a resource to given to IAM role.

When we create a trust policy, we cannot specify a wildcard(*) as a principal.




Cross Account Permission:
You can allow a principal in one account to access resources in a second account. This is called cross-account access. When you allow cross-account access, the account where the principal exists is called the trusted account.
The account where the resource exists is the trusting account.


Resource base policies are supported only for the following:
1. Amazon S3
2. Amazon Simple Notification Service (SNS)
3. Amazon simple queue service (SQS)
4. Amazon Glacier Vault.
5. OpsWorks stacks.
6. Lambda functions.
7. API Gateway.


To give user specific policy, we need to use inline policy for that.
















































