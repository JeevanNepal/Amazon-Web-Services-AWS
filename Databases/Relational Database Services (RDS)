RDS Overview: 

Amazon Relational Database Service (Amazon RDS) makes it easy to set up, operate, and scale a relational database in the cloud. It provides cost-efficient and resizable capacity
while automating time-consuming administration tasks such as hardware provisioning, database setup, patching and backups. It frees you to focus on your applications so you can 
give them the fast performance, high availability, security and compatibility they need.

Amazon RDS is available on several database instance types - optimized for memory, performance or I/O - and provides you with six familiar database engines to choose from, 
including Amazon Aurora, PostgreSQL, MySQL, MariaDB, Oracle Database, and SQL Server. You can use the AWS Database Migration Service to easily migrate or replicate your 
existing databases to Amazon RDS.

AWS RDS Overview

DB Engine : 
a. Oracle
b. MySQL
c. Microsoft SQL Server
d. PostgreSQL
e. MariaDB
f. Amazon Aurora

Backup :
a. Auto
b. Manual
c. Cross-region Snap

Backups are automatically enabled in RDS.
& days retension(can be scaled upto 35 days).

Security :
a. VPC
b. IAM
c. SG
d. SSL
e. Encryption

HA & Load Sharing :
a. Multi AZ
b. Read Replica


RDS Read Replicas for Read Scalability:
    
                   ------------------------------------------------------------------------------------
                   |                             Application                                   |
              reads|                        writes|     |reads                                 |reads
                   |                              |     |                                      |
     RDS DB instance Read replica <--------------RDS DB Instance  <-------------------RDS DB instance read replicas
                                     ASYNC                         ASYNC Replication
                                   Replication 
                                   
                                   
                                   
> Use up to 5 replicas.
> Within AZ, cross AZ or cross region.
> Replication is ASYNC, so reads are eventually consistents.
> Replicas can be pormoted to their own DB.
> Application must update the connection strings to leverge the read replicas.
> We can create upto 40 DB instances/servers per account.
> In database EBS is used and not any other storage.
> General purpose - use for DB workloads with moderate I/O requirement has a limit - min - 20 GB and max - 16384 GB
> Provision IOPS RDS storage use for high performance OLTP workloads. Limit -min - 100GB, max - 16384 GB




RDS Read Replicas Use Cases:
      
                               
                                 Production                                 Reporting 
                                 Application                                Application
                                    |                                            |
                                    | reads                                      | reads
                                    |                                            |
                                    |                                            |
                                    M ------------------------------------------->R
                             RDS DB Instance         ASYNC Replication        RDS DB Instance read Replica
                             

> We have a production database that is taking a normal load.
> We want to run a reporting applicationto run some analytics.
> We need to create a read replica to run the new workload there.
> In this way the production application is unaffected.


Read Replicas are used for SELECT statement only, not for UPDATE, DELETE or INSERT, which changes the database.

                             

RDS Multi AZs - Disaster Recovery: 
    
    
                                     Application 
                                         |     |
                                   writes|     |reads
                                         |     |
                                         |     |
      
                            One DNS name - auto,atic failover
                                         
                 RDS DB <------------------  RDS Master Database 
                            sync replication
                            
                            
                            
> SYNC replication.
> One DNS name - autoatic failover to standby.
> Increase avalability.
> Failover in case of loss of AZ, loss of network, instance or storage failure.
> No manual intervantion in apps, it all automatic.
> Not used for scaling.
                            
                            
                            
Hands On Video Link: https://www.udemy.com/course/aws-certified-solutions-architect-associate-saa-c02/learn/lecture/13528154?start=0#overview                          
                            
                            
Link for SQL Client:  https://sqlectron.github.io/                            
                            
 Steps to connect database to client:
    1. Click on add.
    2. Name of the databse.
    3. Databse Type.
    4. Server address.
    5. Connectivity & security -> Endpoint and port, copy the endpoint address.
    6. Give user name which you created and password.
    7. Test
    8. Save.
                            
  -----------------------------------------------------------------------------------------------------------------------    
RDS+Encryption+Security

RDS Security - Encryption:

    Data at rest Encryption:
      Possibility to encrypt the master & red replicas with AWS KMS - AES -256 Encryption.
      Encryption has to be defined at launch time.
      If the master is not encrypted, the read replica cannot be encrypted.
      Transparent data encryption (TDE)available for oracle and SQL.
      

  In Flight Encryption:
    > SSL certificate to encryption data to RDS flight.
    > Provide SSL options with trust certificate when connecting to database.
    
    To Enforce SSL:
        > POstgres SQL:  rds.force_ssl = 1 in the AWS RDS Console (Parameter group).
        > MYSQL:Within the DB.
            Grant Usage on * To mysqluser.

RDS Encryptions Operations:
 > Snapshots of the un-encrypted RDS database are un-encrypted.
 > Snapshots of the ncrypted RDS database are encrypted.
 > Can copy a snapshot into an encrypted one.
 
 
To encrypt an un-encrypted RDA Database:
    > Create a snapshot of hte un-encrypted RDS database.
    > Copyy a snapshot and enable encryption ofr the snapshot.
    > Restore the database from the encrypted snapshot.
    > Migrate the application to new database and delete the old database.


RDS Security - Netrowk & IAM:
   > Network Security:- 
        . RDS databse usually deploy within the private subnet, not in public one.
        . RDS security works by leveraging security groups(the same concept as EC2 instances), it controls which IP/security group can communicate with RDS.
        
        
        

        
Access Management:
  > IAM policies helps to control who can manage AWS RDS(through the RDS API).
  > Traditional username & password can be used to login to the database.
  > IAM base authentication can be used to login to RDS MYSQL & Postgres SQL.
  
  
 RDS Using IAM Authentication:
    > IAM database authentication works with MYSQL & Postgres SQl.
    > We don't need a password, just an authentication token obtained through RDS API call & IAM.
    > Auth token lasts for 15 minutes.
    
   BENEFITS:
    > Network in/out must be encrypted using ssl.
    > IAM centrally manage users instead of DB.
    > Can leverage IAM roles and EC2 instance profiles for easy integration.
  
  
  RDS Security Summary:
    > Encryption at Rest:
        It is only done only when you first create the DB instance.
        or, unencrypted DB=> snapshot=> copy of snapshot as encrypted=>create DB from snapshot.
        
Your Responsibilities:
    > Check the ports/IPs/security group indond rules in DB's SG.
    > In-database user creation and permissions or manage through IAM.
    > Creating a database with or without public access.
    > Ensure parameter groups in DB is configured to only allow SSL connection.
    
    
 AWS Responsibilities:
    > No SSH access
    > No manula DB patching
    > No manual OS patching
    > No way to audit the underlying instance.






============================================================================================================================================================================

What are the 4 types of database?
How Many Types of Databases Are There?
Hierarchical Databases. Developed in the 1960s, the hierarchical database looks similar to a family tree. ...
Relational Databases. Relational databases are a system designed in the 1970s. ...
Non-Relational Databases. ...
Object oriented databases.



A relational database is a type of database that stores and provides access to data points that are related to one another. Relational databases are based on the relational model, an intuitive, straightforward way of representing data in tables.

RD cannot scale-out horizontally that means we cannot add another server to handle the load but we can increase it's memory vertically such as from 64GB to 128GB in size.
Auto scaling is not possible.

Virtually all relational database uses SQL.


Non-Relational DB/No-SQL DB:
___________________________

1. non relational database store data without a structured mechanism to link data from different tables to one another.
2. Require low cost hardware.
3. Much faster performance(Read/wite) compared to relational database.
4. Horizontal scaling is possible.
5. Never provide table with flat fixed cloumns records. It means schema-free.
6. Best suited for online analytical processing.
7. Eg of no-sql dttadbses - MongoDB, Cassandra, DynamoDB Postgres, redis, raven, mariaDB
8. Auto scaling is possible.



NoSQL databases are categorized into four types: 
-----------------------------------------------
Key-value pair: A schema-less data model organized into a dictionary of key-value pairs
Column-oriented: Data is organized into columns rather than rows
Graph-based
Document-oriented: Consists of sets of key-value pairs stored into a document
NoSQL databases have advantages such as improved scalability, availability, and performance over traditional SQL databases. 
However, each category has its unique attributes and limitations. 
Users should select the database based on their product needs. 



COLUMNAR DATABASE:
-----------------
A columnar database is a database management system (DBMS) that stores data in columns instead of rows. 
The purpose of a columnar database is to efficiently write and read data to and from hard disk storage in order to speed up the time it takes to return a query.




DOCUMENT DATABASE:
-----------------
A document database is a type of NoSQL database that stores data as JSON documents instead of columns and rows. JSON is a native language used to both store and query data. 
Each document consists of a number of key-value pairs. NoSQL databases offer a high level of scalability as well as flexibility in terms of data structure. 
They usually do not use Structured Query Language (SQL), which relational databases typically employ to manage and query data.




KEY- VALUE DATABASE:
-------------------
A key-value database, also known as a key-value store, is a type of non-relational database that uses a simple key-value method to store data. 
In a key-value database, data is stored as a collection of key-value pairs in which a key serves as a unique identifier. 
The data is fetched by a unique key or a number of unique keys to retrieve the associated value with each key. 
Key-value databases are fast and reliable, and are easy to design and implement. However, a lack of standardization and other issues limited key–value systems to niche uses for many years. 
The rapid move to cloud computing after 2010 has led to a renaissance as part of the broader NoSQL movement.




GRAPH DATABASE:
--------------
A graph database (GDB) is a database that uses graph structures to store data. It uses nodes, edges, and properties instead of tables or documents to represent and store data. 
The edges represent relationships between the nodes. A graph database is a specialized, single-purpose platform for creating and manipulating graphs. Graphs contain nodes, edges, 
and properties, all of which are used to represent and store data in a way that relational databases are not equipped to do. 
A graph database is designed so that connections between the data are considered as important as the data itself. It also stores the data flexibly in such a way that it is not restricted to a rigid existing model.




111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

What is Multi-AZ in RDS?
Multi-AZ in Amazon RDS refers to having instances of a database in multiple availability zones (AZs). In a Multi-AZ deployment, Amazon RDS automatically provisions and maintains a synchronous standby 
replica of the master DB in a different AZ. This configuration provides high availability and failover support. 
When Amazon RDS detects a failure, it automatically fails over to a standby instance without manual intervention. Users, logins, and permissions are automatically replicated for you on the secondary. 
You can choose the option of selecting a multi-AZ deployment when creating a DB instance or you can also choose the option of modifying an existing db instance to become a multi-AZ DB instance

Amazon recomends the use of provisioned IOPS instances for multi-AZ RD instances


When Multi-AZ RDS failover Triggers.:
=====================================
1. In case of failure of primary DB instance failure.
2. In case of AZ failure.
3. Loss if network connectivity to primary DB.
4. Loss of primary EC2 instance failure.
5. EBS failure of primary DB instance.
6. The primary DB instance is changed.
7. patching the OS of the DB instance.
8. Manual failover(incase of rebooting).



Multi-Az RDS Failover COnsequences.:
==================================
1. During failover, he CNAME(DNS name/applicationURL) of the RDS DB instance is updated to map to the standby IP address.
2. It is recommended to use the endpoint to reference your DB instances amd not the IP address.
3. The CNAME does not change because the RDS endpoint does not change.
4. The RDS endpoint does not change by selecting multi-AZ option. However, the primary and standby instances will ahve different IP address as they are in different AZ.
5. It is recommended that we use the IP address to point RDS instances, always use endpoint by using endpoint, there will be no change whenever a failover happens.
6. Manual failover is done in case if we need to reboot the DB instance.





SNS Notification by AWS:
=======================
WHen fsilover occurs, AWS RDS sends SNS notification, we can call API calls to find out the RDS events occured in the last 14 days and even we can use CLI to view the last 
14 days events.

Using AWS console, we can view only last one day events.



In case of OS patching, system update or DB scaling, the things happens first on standby then on primary DB to avoid the outage.
In multi AZ, snapshots and automated backups ae done on standby instance to avoid I/O suspension on primary.

WHen there is a maintenance, both the servers of DB are upgraded and there will be application downtime but it will be done under maintenance window.


There are two methods to take backup:

1. AWS RDS automated backup &
2. User initiated manual backup.

- Either we can take backup of entire DB instance or just the DB.

- We can create a storage volume snapshots of our entire DB instances.

Automated backups by AWS, backup our data to multiple AZ to provide for data durability.
- Select-Automatrd backup in AWS console.
- Stored in Amazon S3(EBS storage).
- Multi AZ automated backups will be taken from the standby instance.
- The DB instance must be in "ACTIVE" state for automated backup.
- RDS automatically backsup the DB instances daily by creating a storage volume snapshot of our DB instance(fully daily snapshot) including the DB transcation logs.
- We can decide when we would like to take backup.
- No additional charges is applied for taking backup by AWS but it charges for the storage.
- Amazon RDS retains backups of a DB Instance for a limited, user-specified period of time called the retention period, which by default is 7 days but can be set to up to 35 days. 
   You can initiate a point-in-time restore and specify any second during your retention period, up to the Latest Restorable Time. Backup retention fron CLI and API is only 1 day.


Manual backup/snapshot:





DB encryption:
We cannot encrypt an esixting unencrypted DB instance, to do that we need to create a new DB instance which is encrypted and migrate the data from unencrypted to encrypted.

We can restore from a backup/snapshot into a vew encrypted RDS instance. RDS supports encruption as rest for all DB engines using KMS.
All the snapshots, backups which resides in S3, data on EBS volume and read replica created from the snapshot are encrypted when the data is at rest.





RDS Billing Related points:
==========================
No upfront cost.
We have to pay only for: 1. DB instance hours(partial hours charged as full hours).
                         2. Storage GB/month
                         3. Internet data transfer.
                         4. Backup storage(s3)
                         5. Multi Az DB hours.
                         6. Provisioned storage.
                         7. Double write I/O
                         8. We are not charged for the DB data replication form primary to standby DB.





How to access MYSQL from windows Server?

To access MySQL from Windows Server, you can do the following: 
Open the Command Line application
Enter mysql.exe -uroot -p
MySQL will launch using the root user
Enter the password from the user account you specified with the –u tag
You'll connect to the MySQL server
You can also access a MySQL database by going to Site Tools > Site > MySQL > phpMyAdmin and clicking the Access phpMyAdmin button






DATABASE TYPES:
==============
1. Unstructured Data: 
Unstructured data (or unstructured information) is information that either does not have a pre-defined data model or is not organized in a pre-defined manner.
Unstructured information is typically text-heavy, but may contain data such as dates, numbers, and facts as well.


2. Semi-structured Data:
Semi-structured data is a form of structured data that does not obey the tabular structure of data models associated with relational databases or other forms of data tables, 
but nonetheless contains tags or other markers to separate semantic elements and enforce hierarchies of records and fields within the data.


3. Structured Data: 
Structured data is data that has a standardized format for efficient access by software and humans alike. 
It is typically tabular with rows and columns that clearly define data attributes.
Computers can effectively process structured data for insights due to its quantitative nature.



DYNAMO DB: 3-4 questions from dynamo DB. unstructured data.
==========================================================

- A table is a collection of data items.
- Like all other DB, dynamo DB stores data is tables.

Items:
-----
Each table contains multiple items. na item is a group of attributes that is uniquely identifiable among all of the other items. An item consists of a promary orcomposit ket and 
a flexible number of attributes. Items in dynamoDB are similar to rows, records in other DB.

Note: Aggregate size of an item cannot exceed 400kb including key and all attributes.

What is the maximum size of item in DynamoDB?
400 KB
The maximum item size in DynamoDB is 400 KB, which includes both attribute name binary length (UTF-8 length) and attribute value lengths (again binary length).


Important as per exam view:
Dynamo DB Read capacity Unit:

A read capacity unit (RCU) in DynamoDB represents one strongly consistent read per second, or two eventually consistent reads per second, for an item up to 4 KB in size. 
2 RCUs = 1 transactional read request (one read per second) for items up to 4 KB. For reads on items greater than 4 KB, the total number of reads required = (total item size / 4 KB) rounded up. 
DynamoDB pricing for provisioned throughput type is $0.00016 per RCU

DynamoDB read requests can be either strongly consistent, eventually consistent, or transactional.

-- A strongly consistent read request of an item up to 4 KB requires one read request unit.

-- An eventually consistent read request of an item up to 4 KB requires one-half read request unit.

-- A transactional read request of an item up to 4 KB requires two read request units.

-- 3 copies of the DynamoDB are created for high availability in different AZ and it can be kept in 2 different region with global table.

If you need to read an item that is larger than 4 KB, DynamoDB needs additional read request units. The total number of read request units required depends on the item size, and whether you want an eventually consistent or strongly consistent read. 
For example, if your item size is 8 KB, you require 2 read request units to sustain one strongly consistent read, 1 read request unit if you choose eventually consistent reads, or 4 read request units for a transactional read request.



One write request unit represents one write for an item up to 1 KB in size. If you need to write an item that is larger than 1 KB, DynamoDB needs to consume additional write request units. 
Transactional write requests require 2 write request units to perform one write for items up to 1 KB. The total number of write request units required depends on the item size. For example, 
if your item size is 2 KB, you require 2 write request units to sustain one write request or 4 write request units for a transactional write request.




Amazon DynamoDB pricing

DynamoDB charges for reading, writing, and storing data in your DynamoDB tables, along with any optional features you choose to enable. DynamoDB has two capacity modes, which come with specific billing options for processing reads and writes on your tables: on-demand and provisioned.

Pricing options
There are two pricing options available for Amazon DynamoDB: on-demand capacity mode and provisioned capacity mode. With two pricing models, DynamoDB allows you to choose the best pricing option for your workload.

>> Pricing for on-demand capacity mode
    With on-demand capacity mode, DynamoDB charges you for the data reads and writes your application performs on your tables. You can get started without specifying read or write capacity as DynamoDB will instantly adjust based on your workloads’ requirements.
    
    On-demand capacity mode might be best if you:
    
    Create new tables with unknown workloads
    Have unpredictable application traffic
    Prefer the ease of paying for only what you use


>> Pricing for provisioned capacity mode
   With provisioned capacity mode, you specify the number of reads and writes per second that you expect your application to require. You can use auto scaling to automatically adjust your table’s capacity based on the specified utilization rate to ensure application performance while reducing costs.

  Provisioned capacity mode might be best if you:

  Have predictable application traffic
  Run applications whose traffic is consistent or ramps gradually
  Can forecast capacity requirements to control costs



DynamoDB can do 10000 write capacity units/sec per table.

256 tables per account per region and no limits on size of any table.

The initial quota for the number of DynamoDB tables you can create and manage per AWS account and AWS Region is 2,500 tables. If you need more than 2,500 tables for a single account, 
you can reach out to your AWS account team to explore an increase up to a maximum of 10,000 tables. 
Table sizes have no limits, but accounts have a 256 table limit unless you request a higher cap. 


Other DynamoDB limits include: 
Secondary Indexes Per Table: Five local and five global are permitted
Projected Secondary Index Attributes Per Table: DynamoDB allows 20 attributes
On-Demand capacity mode: You can have up to 256 tables per region
Provisioned capacity mode: You can have up to 256 tables per region
Maximum throughput: There are limits on the maximum throughput you can consume on a per-second basis for an individual partition
GSIs (Global Secondary Index): Limited to 20 per table
















































































































